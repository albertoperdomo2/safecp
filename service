#!/usr/bin/env python3

import os
import sys
import signal
import subprocess
import time
import platform

SCRIPT_PATH = "safecp.py"
PID_FILE = os.path.expanduser("~/.safecp.pid")
LOG_FILE = os.path.expanduser("~/.safecp.log")


def is_running(pid):
    """Check if a process with the given PID is running."""
    try:
        # sending signal 0 checks if the process exists without affecting it
        os.kill(pid, 0)
        return True
    except OSError:
        return False


def start_service():
    """Start the script as a background service."""
    if os.path.exists(PID_FILE):
        with open(PID_FILE, "r") as f:
            pid = int(f.read().strip())
        if is_running(pid):
            print(f"Service is already running with PID {pid}")
            return

    if platform.system() == "Darwin":
        start_macos()
    else:
        start_linux()


def start_macos():
    """Start the service on macOS."""
    # on macOS, we can use launchd or just the nohup approach
    cmd = [sys.executable, os.path.abspath(SCRIPT_PATH)]

    with open(LOG_FILE, "a") as log:
        process = subprocess.Popen(
            cmd,
            stdout=log,
            stderr=log,
            stdin=subprocess.DEVNULL,
            start_new_session=True,
        )

    with open(PID_FILE, "w") as f:
        f.write(str(process.pid))

    print(f"Service started with PID {process.pid}")
    print(f"Logs are being written to {LOG_FILE}")


def start_linux():
    """Start the service on Linux."""
    cmd = [sys.executable, os.path.abspath(SCRIPT_PATH)]

    with open(LOG_FILE, "a") as log:
        process = subprocess.Popen(
            cmd,
            stdout=log,
            stderr=log,
            stdin=subprocess.DEVNULL,
            start_new_session=True,
        )

    with open(PID_FILE, "w") as f:
        f.write(str(process.pid))

    print(f"Service started with PID {process.pid}")
    print(f"Logs are being written to {LOG_FILE}")


def stop_service():
    """Stop the running service."""
    if not os.path.exists(PID_FILE):
        print("No PID file found. Service is not running or was not started properly.")
        return

    with open(PID_FILE, "r") as f:
        try:
            pid = int(f.read().strip())
        except ValueError:
            print("Invalid PID in file. Service might not be running.")
            os.remove(PID_FILE)
            return

    if not is_running(pid):
        print(f"No process with PID {pid} found. Service might have crashed.")
        os.remove(PID_FILE)
        return

    try:
        os.kill(pid, signal.SIGTERM)

        # wait a bit to see if it terminates
        for _ in range(10):
            if not is_running(pid):
                break
            time.sleep(0.5)

        # if still running, force kill
        if is_running(pid):
            os.kill(pid, signal.SIGKILL)
            print(f"Service with PID {pid} forcefully terminated.")
        else:
            print(f"Service with PID {pid} gracefully terminated.")

    except OSError as e:
        print(f"Error stopping service: {e}")

    if os.path.exists(PID_FILE):
        os.remove(PID_FILE)


def check_status():
    """Check if the service is running."""
    if not os.path.exists(PID_FILE):
        print("Service is not running.")
        return

    with open(PID_FILE, "r") as f:
        try:
            pid = int(f.read().strip())
        except ValueError:
            print("Invalid PID in file. Service might not be running.")
            return

    if is_running(pid):
        print(f"Service is running with PID {pid}")
    else:
        print("Service is not running (stale PID file found).")
        os.remove(PID_FILE)


def main():
    if len(sys.argv) != 2 or sys.argv[1] not in ["start", "stop", "status"]:
        print(__doc__)
        sys.exit(1)

    command = sys.argv[1]

    if command == "start":
        start_service()
    elif command == "stop":
        stop_service()
    elif command == "status":
        check_status()


if __name__ == "__main__":
    main()
